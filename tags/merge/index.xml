<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>merge on Master Pi</title>
    <link>https://masterpi-2124.github.io/tags/merge/</link>
    <description>Recent content in merge on Master Pi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 May 2022 21:55:37 +0700</lastBuildDate><atom:link href="https://masterpi-2124.github.io/tags/merge/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Used to GitHub, Eps. 3</title>
      <link>https://masterpi-2124.github.io/p/getting-used-to-github-eps-2/</link>
      <pubDate>Wed, 04 May 2022 21:55:37 +0700</pubDate>
      
      <guid>https://masterpi-2124.github.io/p/getting-used-to-github-eps-2/</guid>
      <description>Hi again. This is Dung Dao Minh, vice president of SoICT Innovation Club, and in this third post of series &amp;ldquo;Github 101&amp;rdquo;, I will talk about some kind of scenarios that can happen when you work on multiple branches in your work repositories, or work in collaboration with a team on a project.
First words In many cases, you (and your collaborators) create multiple branches for different purpose: creating features, bug fixing, code versioning,&amp;hellip; Most of the issues happen when you try to combine the code between those branches: you may realize that you still commit to the main branch while fixing bugs/adding features, another developer may add a little documentation on your code (which is great), or your evil coworker might mess up with your code and make it full of bugs.</description>
    </item>
    
  </channel>
</rss>
